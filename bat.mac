/* We can use on of three versions of A(r) and B(r) functions */
ratprint: false;

approximation_type: 2;
if approximation_type=1 then (
  /* (I) equation (3.6) */
  a: 1,
  b: 1,
  A(r):= 5/2*(a^3+b^3)/r^3 - 
  (3/2*(a^5+b^5) + 5/2*a^2*b^2*(a+b))/r^5 +
  25*a^3*b^3/r^6,
  B(r):= (a^5 + b^5 + 5/3*a^2*b^2*(a+b))/r^5)
else if approximation_type=2 then (
  /* (II) splite interpalation from Table 1 */
  load(interpol),
  /* read Table 1, skip a first line */
  rab: rest(read_nested_list("table1fixed.dat")),
  define(A(x), cspline( map(lambda([p], [p[1], p[2]]), rab))),
  define(B(x), cspline( map(lambda([p], [p[1], p[3]]), rab))))
else (
  /* (III) assimptotic exapnsion in equation
  (1) page. 393, below (5.13)
  (2) (5.17)
  */
  a : 1,
  A(r):=block([xi: (r-2*a)/a], 1 - 4.077*xi),
  B(r):=block([xi: (r-2*a)/a], 0.4060 - 0.78/log(1/xi)))$

r1(r, phi):=''(r*sin(theta)*cos(phi));
/* eq. (6.6, bottom) */
r2(r, phi):=''(r*sin(theta)*sin(phi));
/* from the bottom of page 397 */
r3(r, phi):=''(r*cos(theta));

depends([r1, r2, r3], [r, phi]);
/* eq. (6.6, top) */
deq: diff(r2^2/r3^2, r) = -'B(r)/(1-'A(r))*r/r3^2;
deq: expand(deq*r3^2);

/* eq. (6.5) */
deq: ratsubst(('B(r)-'A(r))/(1-'A(r))*1/r,  'diff(r3,r,1)/r3,  deq);

deq: subst([r2=r2(r, phi(r)), r3=r3(r, phi(r))], deq);
deq: ev(deq, diff)$
deq: solve(deq, 'diff(phi(r), r))[1]$
deq: ev(deq, nouns, theta=%pi/2)$

/* initial position of the second sphere relatvie to the center of the
first sphere */
/* [x0, y0]: [2.47435897436, 0.0366577866578]; */
[x0, y0]: [4.67307692308,  0.0137085137085]$

dphi_dr: subst(phi, phi(r),
  rhs(deq))$

load(rkf45)$

/* transfrom (x0, y0) to (r0, phi0) */
xy_to_rphi(x0, y0):= block([sol: solve([
    'r*'c = x0,
    'r*'s = y0,
    'c^2 + 's^2 = 1], ['c, 's, 'r])[1]],
  [abs(float(assoc('r, sol))), float(acos(assoc('c, sol)))]);
[r0, phi0]: xy_to_rphi(x0, y0);

/* solve numericaly and equation diff(r, phi) = [....] */
dr_dphi: 1/dphi_dr$
res: rkf45(dr_dphi, r, r0, float([phi, phi0, %pi/2]), 'absolute_tolerance=1e-8)$

/* transfrom from (r, phi) to (x, y) */
xy: map(lambda([p], [p[2]*cos(p[1]), p[2]*sin(p[1])]), res)$

/*

plot2d([[discrete, xy]], [x, 0, 5], [y, 0, 3.2], [style, points]);

*/

foutput: printf(false,
  "sphere_trajector_atype~dx0_~6,2e_y0_~6,2e.dat", approximation_type,
  x0, y0);

write_data(xy, foutput);
